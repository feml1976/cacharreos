📂 Estructura del Proyecto Image Downloader Spring Boot
🏗️ Estructura de Directorios Completa
image-downloader/
├── 📁 src/
│   ├── 📁 main/
│   │   ├── 📁 java/
│   │   │   └── 📁 com/
│   │   │       └── 📁 example/
│   │   │           └── 📁 imagedownloader/
│   │   │               ├── 📁 config/
│   │   │               │   └── 📄 SwaggerConfig.java
│   │   │               ├── 📁 controller/
│   │   │               │   └── 📄 ImageDownloaderController.java
│   │   │               ├── 📁 dto/
│   │   │               │   ├── 📄 DownloadRequest.java
│   │   │               │   ├── 📄 DownloadResponse.java
│   │   │               │   └── 📄 ValidationResponse.java
│   │   │               ├── 📁 service/
│   │   │               │   └── 📄 ImageDownloaderService.java
│   │   │               └── 📄 ImageDownloaderApplication.java
│   │   └── 📁 resources/
│   │       ├── 📄 application.properties
│   │       ├── 📁 static/
│   │       └── 📁 templates/
│   └── 📁 test/
│       └── 📁 java/
│           └── 📁 com/
│               └── 📁 example/
│                   └── 📁 imagedownloader/
│                       └── 📄 ImageDownloaderApplicationTests.java
├── 📁 target/ (generado automáticamente)
├── 📄 pom.xml
├── 📄 README.md
└── 📄 .gitignore
📋 Detalle de Archivos por Directorio
🔧 Raíz del Proyecto
image-downloader/
├── 📄 pom.xml                    # Configuración de Maven y dependencias
├── 📄 README.md                  # Documentación del proyecto
└── 📄 .gitignore                 # Archivos a ignorar en Git
☕ Código Java Principal (src/main/java/)
com/example/imagedownloader/
├── 📄 ImageDownloaderApplication.java     # Clase principal Spring Boot
├── 📁 config/
│   └── 📄 SwaggerConfig.java              # Configuración de Swagger/OpenAPI
├── 📁 controller/
│   └── 📄 ImageDownloaderController.java  # Controlador REST con endpoints
├── 📁 dto/
│   ├── 📄 DownloadRequest.java            # DTO para requests de descarga
│   ├── 📄 DownloadResponse.java           # DTO para responses de descarga
│   └── 📄 ValidationResponse.java         # DTO para responses de validación
└── 📁 service/
    └── 📄 ImageDownloaderService.java     # Lógica de negocio (opcional)
🔧 Recursos (src/main/resources/)
resources/
├── 📄 application.properties      # Configuración de Spring Boot y Swagger
├── 📁 static/                     # Archivos estáticos (CSS, JS, imágenes)
└── 📁 templates/                  # Plantillas Thymeleaf (si se usan)
🧪 Tests (src/test/java/)
com/example/imagedownloader/
└── 📄 ImageDownloaderApplicationTests.java    # Tests unitarios
📝 Contenido de Archivos Clave
1. ImageDownloaderApplication.java (Clase Principal)

✅ Configuración principal de Spring Boot
✅ Anotaciones OpenAPI para documentación
✅ Punto de entrada de la aplicación

2. ImageDownloaderController.java (Controlador)

✅ Endpoints REST (/download, /validate)
✅ Anotaciones Swagger completas
✅ Lógica de descarga y validación de URLs
✅ Manejo de errores y respuestas

3. SwaggerConfig.java (Configuración Swagger)

✅ Configuración personalizada de OpenAPI
✅ Información del API (título, descripción, contacto)
✅ Servidores múltiples (desarrollo/producción)
✅ Documentación enriquecida con Markdown

4. DTOs (Objetos de Transferencia)

✅ DownloadRequest: Estructura para requests
✅ DownloadResponse: Estructura para responses de descarga
✅ ValidationResponse: Estructura para responses de validación
✅ Anotaciones Schema para documentación

5. application.properties (Configuración)

✅ Puerto del servidor
✅ Configuración de Swagger UI
✅ Configuración de logging
✅ Configuración de archivos multipart

6. pom.xml (Dependencias Maven)

✅ Spring Boot Starter Web
✅ JSoup para parsing HTML
✅ SpringDoc OpenAPI para Swagger
✅ Configuración de build

🚀 Comandos para Crear la Estructura
Crear proyecto desde cero:
bash# Crear directorio principal
mkdir image-downloader
cd image-downloader

# Crear estructura de directorios Maven
mkdir -p src/main/java/com/example/imagedownloader/{config,controller,dto,service}
mkdir -p src/main/resources/{static,templates}
mkdir -p src/test/java/com/example/imagedownloader
mkdir target

# Crear archivos principales
touch pom.xml
touch README.md
touch .gitignore
touch src/main/resources/application.properties
touch src/main/java/com/example/imagedownloader/ImageDownloaderApplication.java
touch src/main/java/com/example/imagedownloader/config/SwaggerConfig.java
touch src/main/java/com/example/imagedownloader/controller/ImageDownloaderController.java
touch src/main/java/com/example/imagedownloader/dto/{DownloadRequest.java,DownloadResponse.java,ValidationResponse.java}
touch src/test/java/com/example/imagedownloader/ImageDownloaderApplicationTests.java
📁 Directorios de Salida (Generados por la App)
C:/images/                          # Directorio base para imágenes descargadas
├── 📁 example.com/                 # Carpeta por dominio
│   └── 📁 550e8400-e29b-41d4.../   # Carpeta única (UUID)
│       ├── 🖼️ image1.jpg
│       ├── 🖼️ image2.png
│       └── 🖼️ logo.svg
├── 📁 unsplash.com/
│   └── 📁 6ba7b810-9dad-11d1.../
│       ├── 🖼️ photo1.jpg
│       └── 🖼️ photo2.webp
└── 📁 otros-dominios.../
🔗 URLs del Proyecto en Ejecución
FuncionalidadURL🏠 Aplicación Principalhttp://localhost:8080📚 Swagger UIhttp://localhost:8080/swagger-ui.html📄 OpenAPI JSONhttp://localhost:8080/v3/api-docs✅ Validar URLGET /api/images/validate?url=...⬇️ DescargarPOST /api/images/download
⚙️ Pasos para Ejecutar

📥 Crear proyecto en IntelliJ IDEA (Spring Boot)
📋 Copiar todos los archivos en sus ubicaciones
🔄 Actualizar dependencias Maven (mvn clean install)
▶️ Ejecutar aplicación (mvn spring-boot:run)
🌐 Abrir http://localhost:8080/swagger-ui.html

💡 Notas Importantes

📁 Estructura Maven Standard: Sigue las convenciones de Maven
🏗️ Separación de Responsabilidades: Controller, Service, DTO separados
🔧 Configuración Centralizada: application.properties y SwaggerConfig
📚 Documentación Automática: Swagger se genera automáticamente
🧪 Tests Incluidos: Estructura preparada para pruebas unitarias